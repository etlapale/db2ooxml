#! /usr/bin/env python3
# db2ooxml — Converts from DocBook to Office OpenXML documents

import argparse
import os.path
import re
import sys

#import PIL.Image

import lxml.etree


atelo_ns = 'http://atelo.org/ns/db2ooxml'

def upper_case(ctx, a):
    return a.upper()

def lower_case(ctx, a):
    return a.lower()

def ends_with(ctx, a, suffix):
    if isinstance(a,list):
        a = a[0]
    return a.endswith(suffix)

def starts_with(ctx, a, suffix):
    if isinstance(a,list):
        a = a[0]
    return a.startswith(suffix)

def emu(ctx, a):
    if isinstance(a,list):
        a = float(a[0])
    return int(a*914400)

def emu_height(ctx, a, width):
    path = a[0]
    width = float(width[0])
    if path.endswith('.svg'):
        svg = lxml.etree.parse(path)
        root = svg.getroot()
        w = float(root.get('width'))
        h = float(root.get('height'))
        del svg
        return int(h*width/w)
    else:
        print('warning: unhandled image type for', path, file=sys.stderr)
        return width

def media_ref(ctx, a):
    path = a[0]
    name = os.path.splitext(os.path.basename(path))[0]
    ref = re.sub(r'(^|-)([a-z])', lambda m: m.group(2).upper(), name)
    return 'rMedia'+ref

def single_spaces(ctx, a):
    return re.sub(r'\s+', ' ', str(a[0]))

if __name__ == '__main__':
    ap = argparse.ArgumentParser(description='DocBook to OpenXML converter')
    ap.add_argument('input', metavar='DBDOC', nargs=1,
                    help='input DocBook document')
    ap.add_argument('-o', '--output', default=None,
                    help='output WordML document')
    ap.add_argument('-p', '--paper-size', default='letter',
                    help='paper size (letter,a4,a5,…)')
    args = ap.parse_args()

    # Search for the XSLT stylesheets
    dirs = [os.path.dirname(os.path.dirname(os.path.realpath(__file__)))]
    basedir = None
    for path in dirs:
        if os.path.exists(os.path.join(path, 'xslt')):
            basedir = path
            break
    if basedir is None:
       exit('error: could not find the XSLT stylesheets') 

    # Load the XSLT stylesheets
    xslt_path = os.path.join(basedir, 'xslt', 'docbook2wordml.xsl')
    xslt_xml = lxml.etree.parse(xslt_path)
    transform = lxml.etree.XSLT(xslt_xml)

    # Load the DocBook document
    db_doc = lxml.etree.parse(args.input[0])

    # Register extensions
    ns = lxml.etree.FunctionNamespace(atelo_ns)
    ns.prefix = 'atl'
    ns['single-spaces'] = single_spaces
    ns['starts-with'] = starts_with
    ns['ends-with'] = ends_with
    ns['emu'] = emu
    ns['emu-height'] = emu_height
    ns['media-ref'] = media_ref
    ns['upper-case'] = upper_case
    ns['lower-case'] = lower_case
    #e = lxml.etree.XPathEvaluator(db_doc)
    #print(e("atl:starts-with(' hello ', ' ')"))

    # Transform the DocBook document to WordML
    wml_doc = transform(db_doc, **{'paper.type': "'%s'"%args.paper_size})

    # Write the generated WordML document
    if args.output is None:
        output = sys.stdout
    else:
        output = open(args.output, 'w')
    output.write(lxml.etree.tostring(wml_doc, encoding=str))
