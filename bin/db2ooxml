#! /usr/bin/env python3
# db2ooxml — Converts from DocBook to Office OpenXML documents
#
# Copyright © 2014  Émilien Tlapale
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import datetime
import os
import os.path
import re
import subprocess
import sys
import zipfile

import lxml.etree


ATELO_NS = 'http://atelo.org/ns/db2ooxml'
DOCBOOK_NS = 'http://docbook.org/ns/docbook'

def upper_case(ctx, a):
    return a.upper()

def lower_case(ctx, a):
    return a.lower()

def ends_with(ctx, a, suffix):
    if isinstance(a,list):
        a = a[0]
    return a.endswith(suffix)

def starts_with(ctx, a, suffix):
    if isinstance(a,list):
        a = a[0]
    return a.startswith(suffix)

def emu_height(ctx, a, width):
    path = a[0]
    width = float(width[0])
    if path.endswith('.png'):
        # Check image size to maintain correct ratio
        from PIL import Image
        img = Image.open(path)
        w,h = img.size
        del img

        return int(h*width/w)
    else:
        print('warning: unhandled image type for', path, file=sys.stderr)
        return width

def media_ref(ctx, a):
    path = a[0]
    name = os.path.splitext(os.path.basename(path))[0]
    ref = re.sub(r'(^|-)([a-z])', lambda m: m.group(2).upper(), name)
    return 'rMedia'+ref

def single_spaces(ctx, a):
    return re.sub(r'\s+', ' ', str(a[0]))

def latex2mml(ctx, txt):
    return []
    if isinstance(txt,list):
        txt = txt[0]
    # Invoke the converter
    args = ['/usr/bin/latexmlmath', txt]
    p = subprocess.Popen(args, stdout=subprocess.PIPE)
    print('sending', txt, 'to', p)
    out,err = p.communicate()
    # Parse the resulting XML
    mml = lxml.etree.XML(out)
    print(lxml.etree.tostring(mml))
    return mml

iso8601_date = '%Y-%m-%d'
iso8601_datetime_z = '%Y-%m-%dT%H:%M:%SZ'

def format_date(ctx, txt):
    '''
    Convert a textual date to a proper timestamp.
    '''
    if isinstance(txt, list): txt = txt[0]
    # Try some formats
    try:
        d = datetime.datetime.strptime(txt, iso8601_datetime_z)
    except ValueError:
        d = datetime.datetime.strptime(txt, iso8601_date)
    return d.strftime(iso8601_datetime_z)

if __name__ == '__main__':
    ap = argparse.ArgumentParser(description='DocBook to OpenXML converter')
    ap.add_argument('input', metavar='DBDOC', nargs=1,
                    help='input DocBook document')
    ap.add_argument('-f', '--force', default=False, action='store_true',
                    help='force output overwritting')
    ap.add_argument('-o', '--output', default=None,
                    help='output docx document')
    ap.add_argument('-p', '--paper-size', default='letter',
                    help='paper size (letter,a4,a5,…)')
    args = ap.parse_args()

    # By default, just replace the extension by docx
    if args.output is None:
        args.output = os.path.splitext(os.path.basename(args.input[0]))[0] \
                      + '.docx'
    if os.path.exists(args.output):
        if args.force:
            os.unlink(args.output)
        else:
            exit('error: output file already exists (try with --force)')

    # Search for the XSLT stylesheets
    dirs = [os.path.dirname(os.path.dirname(os.path.realpath(__file__)))]
    basedir = None
    for path in dirs:
        if os.path.exists(os.path.join(path, 'xslt')):
            basedir = path
            break
    if basedir is None:
       exit('error: could not find the XSLT stylesheets') 

    # Load the XSLT stylesheets
    xslt_path = os.path.join(basedir, 'xslt', 'docbook2wordml.xsl')
    xslt_xml = lxml.etree.parse(xslt_path)
    transform = lxml.etree.XSLT(xslt_xml)

    # Load the DocBook document
    db_doc = lxml.etree.parse(args.input[0])

    # Register extensions
    ns = lxml.etree.FunctionNamespace(ATELO_NS)
    ns.prefix = 'atl'
    ns['single-spaces'] = single_spaces
    ns['starts-with'] = starts_with
    ns['ends-with'] = ends_with
    ns['emu-height'] = emu_height
    ns['format-date'] = format_date
    ns['media-ref'] = media_ref
    ns['upper-case'] = upper_case
    ns['lower-case'] = lower_case
    ns['latex2mml'] = latex2mml

    # Transform the DocBook document to WordML
    wml_doc = transform(db_doc, **{'paper.type': "'%s'"%args.paper_size})

    # Create the docx archive
    inputdir = os.path.dirname(args.input[0])
    ref_arcname = 'word/_rels/document.xml.rels'
    img_reltype = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image'
    with zipfile.ZipFile(args.output, 'w', zipfile.ZIP_DEFLATED) as zf:
        docx_path = os.path.join(basedir, 'docx')
        # Write common files
        for (root,_,files) in os.walk(docx_path):
            for filename in files:
                if filename.endswith('~'):
                    continue
                path = os.path.join(root, filename)
                arcname = path[len(docx_path)+1:]
                # Delay references
                if arcname == ref_arcname:
                    continue
                zf.write(path, arcname)
        # Write the generated WordML document
        zf.writestr('word/document.xml', lxml.etree.tostring(wml_doc, encoding=str))
        # Open the relations file
        rels_path = os.path.join(basedir, 'docx', ref_arcname)
        rels_doc = lxml.etree.parse(rels_path)
        # Copy the media
        media = db_doc.xpath("//db:imagedata[atl:ends-with(@fileref,'.png')]/@fileref", namespaces={'db': DOCBOOK_NS})
        for m in set(media):
            path = os.path.join(inputdir, m)
            # Add the media to the docx archive
            filename = os.path.basename(path)
            zf.write(path, 'word/media/'+filename)
            # Reference it
            refname = media_ref(None, [filename])
            ref_elem = lxml.etree.SubElement(rels_doc.getroot(),
                                             'Relationship',
                                             Id=refname,
                                             Type=img_reltype,
                                             Target='media/'+filename)
        # Add the final references
        zf.writestr(ref_arcname, lxml.etree.tostring(rels_doc, encoding=str))

# Local Variables:
# mode: python
# End:
